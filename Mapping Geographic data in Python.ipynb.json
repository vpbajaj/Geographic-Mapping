{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import relavent packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas\n",
    "from shapely.geometry import Point\n",
    "import missingno as msn\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import shapefile as shp\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initializing visual set\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Read the shape file from the computer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "shp_path = '/Users/admin/Downloads/aqueductglobalmaps21shp/aqueduct_global_dl_20150409.shp'\n",
    "sf = shp.Reader(shp_path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "shapefile.Reader"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# type of file\n",
    "type(sf)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Converting shapefile data on Pandas dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_shapefile(sf):\n",
    "    \"\"\"\n",
    "    Read a shapefile into a Pandas dataframe with a 'coords' \n",
    "    column holding the geometry information. This uses the pyshp\n",
    "    package\n",
    "    \"\"\"\n",
    "    fields = [x[0] for x in sf.fields][1:]\n",
    "    records = sf.records()\n",
    "    shps = [s.points for s in sf.shapes()]\n",
    "    df = pd.DataFrame(columns=fields, data=records)\n",
    "    df = df.assign(coords=shps)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25010, 61)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = read_shapefile(sf)\n",
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# making sure its a data frame\n",
    "type(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GU</th>\n",
       "      <th>Shape_Leng</th>\n",
       "      <th>Shape_Area</th>\n",
       "      <th>BasinID</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>BASIN_NAME</th>\n",
       "      <th>WITHDRAWAL</th>\n",
       "      <th>CONSUMPTIO</th>\n",
       "      <th>BA</th>\n",
       "      <th>BWS</th>\n",
       "      <th>...</th>\n",
       "      <th>W_CHEM</th>\n",
       "      <th>W_POWER</th>\n",
       "      <th>W_MINE</th>\n",
       "      <th>W_OILGAS</th>\n",
       "      <th>DEF_PQUANT</th>\n",
       "      <th>W_AGR</th>\n",
       "      <th>W_FOODBV</th>\n",
       "      <th>W_TEX</th>\n",
       "      <th>OWR_cat</th>\n",
       "      <th>coords</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5055</th>\n",
       "      <td>5056</td>\n",
       "      <td>0.007339</td>\n",
       "      <td>1.184325e-06</td>\n",
       "      <td>7711</td>\n",
       "      <td>Iceland</td>\n",
       "      <td></td>\n",
       "      <td>28.0</td>\n",
       "      <td>2.848425e+00</td>\n",
       "      <td>5.922040e+05</td>\n",
       "      <td>0.000047</td>\n",
       "      <td>...</td>\n",
       "      <td>1.562862</td>\n",
       "      <td>0.639715</td>\n",
       "      <td>1.183392</td>\n",
       "      <td>1.788941</td>\n",
       "      <td>0.302920</td>\n",
       "      <td>0.395617</td>\n",
       "      <td>1.631812</td>\n",
       "      <td>0.688262</td>\n",
       "      <td>Low risk (0-1)</td>\n",
       "      <td>[(-17.56103401221418, 65.97343675230383), (-17...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7136</th>\n",
       "      <td>7137</td>\n",
       "      <td>11.667353</td>\n",
       "      <td>2.032439e+00</td>\n",
       "      <td>1321</td>\n",
       "      <td>Egypt</td>\n",
       "      <td></td>\n",
       "      <td>61859280.0</td>\n",
       "      <td>4.219933e+07</td>\n",
       "      <td>2.399529e+06</td>\n",
       "      <td>25.779759</td>\n",
       "      <td>...</td>\n",
       "      <td>1.785501</td>\n",
       "      <td>3.026709</td>\n",
       "      <td>1.743568</td>\n",
       "      <td>1.102963</td>\n",
       "      <td>4.057425</td>\n",
       "      <td>3.150637</td>\n",
       "      <td>2.242610</td>\n",
       "      <td>2.579887</td>\n",
       "      <td>Medium to high risk (2-3)</td>\n",
       "      <td>[(28.118118132590382, 27.491568184661105), (28...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21769</th>\n",
       "      <td>21770</td>\n",
       "      <td>0.010160</td>\n",
       "      <td>4.200627e-08</td>\n",
       "      <td>8539</td>\n",
       "      <td>Israel</td>\n",
       "      <td></td>\n",
       "      <td>526159296.0</td>\n",
       "      <td>3.738975e+08</td>\n",
       "      <td>1.007784e+08</td>\n",
       "      <td>5.220955</td>\n",
       "      <td>...</td>\n",
       "      <td>2.177283</td>\n",
       "      <td>2.831866</td>\n",
       "      <td>2.518652</td>\n",
       "      <td>1.050201</td>\n",
       "      <td>4.090933</td>\n",
       "      <td>2.977737</td>\n",
       "      <td>3.325252</td>\n",
       "      <td>3.491459</td>\n",
       "      <td>High risk (3-4)</td>\n",
       "      <td>[(34.258611286300265, 31.184144184787783), (34...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16251</th>\n",
       "      <td>16252</td>\n",
       "      <td>1.305385</td>\n",
       "      <td>6.903196e-02</td>\n",
       "      <td>14407</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>BAKER</td>\n",
       "      <td>21839344.0</td>\n",
       "      <td>9.510263e+06</td>\n",
       "      <td>1.197106e+10</td>\n",
       "      <td>0.001824</td>\n",
       "      <td>...</td>\n",
       "      <td>0.717912</td>\n",
       "      <td>0.789685</td>\n",
       "      <td>0.258541</td>\n",
       "      <td>0.415354</td>\n",
       "      <td>0.316861</td>\n",
       "      <td>0.463264</td>\n",
       "      <td>0.369810</td>\n",
       "      <td>0.282449</td>\n",
       "      <td>Low risk (0-1)</td>\n",
       "      <td>[(-71.33692591055285, -46.158983564088146), (-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>924</th>\n",
       "      <td>925</td>\n",
       "      <td>2.676787</td>\n",
       "      <td>1.538498e-01</td>\n",
       "      <td>14103</td>\n",
       "      <td>Chile</td>\n",
       "      <td></td>\n",
       "      <td>118388104.0</td>\n",
       "      <td>8.689599e+07</td>\n",
       "      <td>3.439762e+08</td>\n",
       "      <td>0.344175</td>\n",
       "      <td>...</td>\n",
       "      <td>2.302866</td>\n",
       "      <td>2.805554</td>\n",
       "      <td>2.444083</td>\n",
       "      <td>1.772900</td>\n",
       "      <td>2.855752</td>\n",
       "      <td>2.642259</td>\n",
       "      <td>2.416381</td>\n",
       "      <td>2.472154</td>\n",
       "      <td>Medium to high risk (2-3)</td>\n",
       "      <td>[(-71.82992005322433, -34.45243532493754), (-7...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          GU  Shape_Leng    Shape_Area  BasinID    COUNTRY BASIN_NAME  \\\n",
       "5055    5056    0.007339  1.184325e-06     7711    Iceland              \n",
       "7136    7137   11.667353  2.032439e+00     1321      Egypt              \n",
       "21769  21770    0.010160  4.200627e-08     8539     Israel              \n",
       "16251  16252    1.305385  6.903196e-02    14407  Argentina      BAKER   \n",
       "924      925    2.676787  1.538498e-01    14103      Chile              \n",
       "\n",
       "        WITHDRAWAL    CONSUMPTIO            BA        BWS  ...    W_CHEM  \\\n",
       "5055          28.0  2.848425e+00  5.922040e+05   0.000047  ...  1.562862   \n",
       "7136    61859280.0  4.219933e+07  2.399529e+06  25.779759  ...  1.785501   \n",
       "21769  526159296.0  3.738975e+08  1.007784e+08   5.220955  ...  2.177283   \n",
       "16251   21839344.0  9.510263e+06  1.197106e+10   0.001824  ...  0.717912   \n",
       "924    118388104.0  8.689599e+07  3.439762e+08   0.344175  ...  2.302866   \n",
       "\n",
       "        W_POWER    W_MINE  W_OILGAS DEF_PQUANT     W_AGR  W_FOODBV     W_TEX  \\\n",
       "5055   0.639715  1.183392  1.788941   0.302920  0.395617  1.631812  0.688262   \n",
       "7136   3.026709  1.743568  1.102963   4.057425  3.150637  2.242610  2.579887   \n",
       "21769  2.831866  2.518652  1.050201   4.090933  2.977737  3.325252  3.491459   \n",
       "16251  0.789685  0.258541  0.415354   0.316861  0.463264  0.369810  0.282449   \n",
       "924    2.805554  2.444083  1.772900   2.855752  2.642259  2.416381  2.472154   \n",
       "\n",
       "                         OWR_cat  \\\n",
       "5055              Low risk (0-1)   \n",
       "7136   Medium to high risk (2-3)   \n",
       "21769            High risk (3-4)   \n",
       "16251             Low risk (0-1)   \n",
       "924    Medium to high risk (2-3)   \n",
       "\n",
       "                                                  coords  \n",
       "5055   [(-17.56103401221418, 65.97343675230383), (-17...  \n",
       "7136   [(28.118118132590382, 27.491568184661105), (28...  \n",
       "21769  [(34.258611286300265, 31.184144184787783), (34...  \n",
       "16251  [(-71.33692591055285, -46.158983564088146), (-...  \n",
       "924    [(-71.82992005322433, -34.45243532493754), (-7...  \n",
       "\n",
       "[5 rows x 61 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# random sample of 5 rows \n",
    "df.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exploratory data analysis: \n",
    "1. Checking the information, data type\n",
    "2. Any missing value\n",
    "3. Statistical data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 25010 entries, 0 to 25009\n",
      "Data columns (total 61 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   GU          25010 non-null  int64  \n",
      " 1   Shape_Leng  25010 non-null  float64\n",
      " 2   Shape_Area  25010 non-null  float64\n",
      " 3   BasinID     25010 non-null  int64  \n",
      " 4   COUNTRY     25010 non-null  object \n",
      " 5   BASIN_NAME  25010 non-null  object \n",
      " 6   WITHDRAWAL  25010 non-null  float64\n",
      " 7   CONSUMPTIO  25010 non-null  float64\n",
      " 8   BA          25010 non-null  float64\n",
      " 9   BWS         24916 non-null  float64\n",
      " 10  BWS_s       25010 non-null  float64\n",
      " 11  BWS_cat     25010 non-null  object \n",
      " 12  WSV         25010 non-null  float64\n",
      " 13  WSV_s       25010 non-null  float64\n",
      " 14  WSV_cat     25010 non-null  object \n",
      " 15  SV          25010 non-null  float64\n",
      " 16  SV_s        25010 non-null  float64\n",
      " 17  SV_cat      25010 non-null  object \n",
      " 18  HFO         25010 non-null  float64\n",
      " 19  HFO_s       25010 non-null  float64\n",
      " 20  HFO_cat     25010 non-null  object \n",
      " 21  DRO         25010 non-null  float64\n",
      " 22  DRO_s       25010 non-null  float64\n",
      " 23  DRO_cat     25010 non-null  object \n",
      " 24  BT          25010 non-null  float64\n",
      " 25  STOR        25010 non-null  float64\n",
      " 26  STOR_s      25010 non-null  float64\n",
      " 27  STOR_cat    25010 non-null  object \n",
      " 28  GW          25010 non-null  float64\n",
      " 29  GW_s        25010 non-null  float64\n",
      " 30  GW_cat      25010 non-null  object \n",
      " 31  WRI         24916 non-null  float64\n",
      " 32  WRI_s       25010 non-null  float64\n",
      " 33  WRI_cat     25010 non-null  object \n",
      " 34  ECO_S       25010 non-null  float64\n",
      " 35  ECO_S_s     25010 non-null  float64\n",
      " 36  ECO_S_cat   25010 non-null  object \n",
      " 37  MC          25010 non-null  float64\n",
      " 38  MC_s        25010 non-null  float64\n",
      " 39  MC_cat      25010 non-null  object \n",
      " 40  ECO_V       25010 non-null  float64\n",
      " 41  ECO_V_s     25010 non-null  float64\n",
      " 42  ECO_V_cat   25010 non-null  object \n",
      " 43  WCG         25010 non-null  float64\n",
      " 44  WCG_s       25010 non-null  float64\n",
      " 45  WCG_cat     25010 non-null  object \n",
      " 46  DEF_PQUAL   25010 non-null  float64\n",
      " 47  DEF_REGREP  25010 non-null  float64\n",
      " 48  W_SEMICO    25010 non-null  float64\n",
      " 49  DEFAULT     25010 non-null  float64\n",
      " 50  W_CONSTR    25010 non-null  float64\n",
      " 51  W_CHEM      25010 non-null  float64\n",
      " 52  W_POWER     25010 non-null  float64\n",
      " 53  W_MINE      25010 non-null  float64\n",
      " 54  W_OILGAS    25010 non-null  float64\n",
      " 55  DEF_PQUANT  25010 non-null  float64\n",
      " 56  W_AGR       25010 non-null  float64\n",
      " 57  W_FOODBV    25010 non-null  float64\n",
      " 58  W_TEX       25010 non-null  float64\n",
      " 59  OWR_cat     25010 non-null  object \n",
      " 60  coords      25010 non-null  object \n",
      "dtypes: float64(43), int64(2), object(16)\n",
      "memory usage: 11.6+ MB\n"
     ]
    }
   ],
   "source": [
    "# Checking the information, data type\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1728x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# checking for any missing value\n",
    "msn.bar(df, color='darkolivegreen');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>GU</th>\n",
       "      <th>Shape_Leng</th>\n",
       "      <th>Shape_Area</th>\n",
       "      <th>BasinID</th>\n",
       "      <th>WITHDRAWAL</th>\n",
       "      <th>CONSUMPTIO</th>\n",
       "      <th>BA</th>\n",
       "      <th>BWS</th>\n",
       "      <th>BWS_s</th>\n",
       "      <th>WSV</th>\n",
       "      <th>...</th>\n",
       "      <th>DEFAULT</th>\n",
       "      <th>W_CONSTR</th>\n",
       "      <th>W_CHEM</th>\n",
       "      <th>W_POWER</th>\n",
       "      <th>W_MINE</th>\n",
       "      <th>W_OILGAS</th>\n",
       "      <th>DEF_PQUANT</th>\n",
       "      <th>W_AGR</th>\n",
       "      <th>W_FOODBV</th>\n",
       "      <th>W_TEX</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>25010.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>2.501000e+04</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>2.501000e+04</td>\n",
       "      <td>2.501000e+04</td>\n",
       "      <td>2.501000e+04</td>\n",
       "      <td>24916.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "      <td>25010.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>12505.500000</td>\n",
       "      <td>4.657028</td>\n",
       "      <td>6.085516e-01</td>\n",
       "      <td>7342.814994</td>\n",
       "      <td>4.771135e+08</td>\n",
       "      <td>2.513469e+08</td>\n",
       "      <td>2.521857e+10</td>\n",
       "      <td>-29.669867</td>\n",
       "      <td>-0.866664</td>\n",
       "      <td>-163.216090</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.588408</td>\n",
       "      <td>-0.666400</td>\n",
       "      <td>-0.549585</td>\n",
       "      <td>-0.802877</td>\n",
       "      <td>-0.501776</td>\n",
       "      <td>-0.647819</td>\n",
       "      <td>-0.684594</td>\n",
       "      <td>-0.755804</td>\n",
       "      <td>-0.529295</td>\n",
       "      <td>-0.699455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>7219.909452</td>\n",
       "      <td>8.493537</td>\n",
       "      <td>4.349143e+00</td>\n",
       "      <td>4446.593705</td>\n",
       "      <td>2.146302e+09</td>\n",
       "      <td>1.329732e+09</td>\n",
       "      <td>2.126521e+11</td>\n",
       "      <td>1671.665388</td>\n",
       "      <td>293.035887</td>\n",
       "      <td>2310.802793</td>\n",
       "      <td>...</td>\n",
       "      <td>293.032715</td>\n",
       "      <td>293.032241</td>\n",
       "      <td>293.032186</td>\n",
       "      <td>293.030118</td>\n",
       "      <td>293.033053</td>\n",
       "      <td>293.031874</td>\n",
       "      <td>293.032914</td>\n",
       "      <td>293.031029</td>\n",
       "      <td>293.032550</td>\n",
       "      <td>293.031570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000095</td>\n",
       "      <td>3.018234e-10</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>-3.276700e+04</td>\n",
       "      <td>-3.276700e+04</td>\n",
       "      <td>-3.276700e+04</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>-32767.000000</td>\n",
       "      <td>-32767.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6253.250000</td>\n",
       "      <td>1.204026</td>\n",
       "      <td>2.519207e-02</td>\n",
       "      <td>3514.250000</td>\n",
       "      <td>5.748678e+05</td>\n",
       "      <td>8.334966e+04</td>\n",
       "      <td>9.147408e+07</td>\n",
       "      <td>0.000806</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.270642</td>\n",
       "      <td>...</td>\n",
       "      <td>1.089194</td>\n",
       "      <td>0.951097</td>\n",
       "      <td>1.395527</td>\n",
       "      <td>1.105113</td>\n",
       "      <td>1.333581</td>\n",
       "      <td>1.121818</td>\n",
       "      <td>0.748313</td>\n",
       "      <td>1.005495</td>\n",
       "      <td>1.377493</td>\n",
       "      <td>1.010364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>12505.500000</td>\n",
       "      <td>2.792722</td>\n",
       "      <td>1.398187e-01</td>\n",
       "      <td>7128.000000</td>\n",
       "      <td>1.560863e+07</td>\n",
       "      <td>3.655522e+06</td>\n",
       "      <td>7.835471e+08</td>\n",
       "      <td>0.020030</td>\n",
       "      <td>0.080421</td>\n",
       "      <td>0.404305</td>\n",
       "      <td>...</td>\n",
       "      <td>1.858734</td>\n",
       "      <td>1.631046</td>\n",
       "      <td>1.972526</td>\n",
       "      <td>1.579172</td>\n",
       "      <td>2.133368</td>\n",
       "      <td>1.815041</td>\n",
       "      <td>1.495203</td>\n",
       "      <td>1.615565</td>\n",
       "      <td>2.038912</td>\n",
       "      <td>1.745756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>18757.750000</td>\n",
       "      <td>5.953255</td>\n",
       "      <td>5.310626e-01</td>\n",
       "      <td>11261.750000</td>\n",
       "      <td>1.729721e+08</td>\n",
       "      <td>6.788413e+07</td>\n",
       "      <td>5.075966e+09</td>\n",
       "      <td>0.202641</td>\n",
       "      <td>4.370467</td>\n",
       "      <td>0.673232</td>\n",
       "      <td>...</td>\n",
       "      <td>2.912897</td>\n",
       "      <td>3.038578</td>\n",
       "      <td>2.667577</td>\n",
       "      <td>2.484798</td>\n",
       "      <td>2.837052</td>\n",
       "      <td>2.706945</td>\n",
       "      <td>3.244840</td>\n",
       "      <td>2.690274</td>\n",
       "      <td>2.686892</td>\n",
       "      <td>2.762228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>25010.000000</td>\n",
       "      <td>1004.848961</td>\n",
       "      <td>6.595916e+02</td>\n",
       "      <td>15006.000000</td>\n",
       "      <td>5.340514e+10</td>\n",
       "      <td>3.564753e+10</td>\n",
       "      <td>6.050806e+12</td>\n",
       "      <td>190209.541317</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>7.937254</td>\n",
       "      <td>...</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 45 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                 GU    Shape_Leng    Shape_Area       BasinID    WITHDRAWAL  \\\n",
       "count  25010.000000  25010.000000  2.501000e+04  25010.000000  2.501000e+04   \n",
       "mean   12505.500000      4.657028  6.085516e-01   7342.814994  4.771135e+08   \n",
       "std     7219.909452      8.493537  4.349143e+00   4446.593705  2.146302e+09   \n",
       "min        1.000000      0.000095  3.018234e-10     -1.000000 -3.276700e+04   \n",
       "25%     6253.250000      1.204026  2.519207e-02   3514.250000  5.748678e+05   \n",
       "50%    12505.500000      2.792722  1.398187e-01   7128.000000  1.560863e+07   \n",
       "75%    18757.750000      5.953255  5.310626e-01  11261.750000  1.729721e+08   \n",
       "max    25010.000000   1004.848961  6.595916e+02  15006.000000  5.340514e+10   \n",
       "\n",
       "         CONSUMPTIO            BA            BWS         BWS_s           WSV  \\\n",
       "count  2.501000e+04  2.501000e+04   24916.000000  25010.000000  25010.000000   \n",
       "mean   2.513469e+08  2.521857e+10     -29.669867     -0.866664   -163.216090   \n",
       "std    1.329732e+09  2.126521e+11    1671.665388    293.035887   2310.802793   \n",
       "min   -3.276700e+04 -3.276700e+04  -32767.000000 -32767.000000 -32767.000000   \n",
       "25%    8.334966e+04  9.147408e+07       0.000806      0.000000      0.270642   \n",
       "50%    3.655522e+06  7.835471e+08       0.020030      0.080421      0.404305   \n",
       "75%    6.788413e+07  5.075966e+09       0.202641      4.370467      0.673232   \n",
       "max    3.564753e+10  6.050806e+12  190209.541317      5.000000      7.937254   \n",
       "\n",
       "       ...       DEFAULT      W_CONSTR        W_CHEM       W_POWER  \\\n",
       "count  ...  25010.000000  25010.000000  25010.000000  25010.000000   \n",
       "mean   ...     -0.588408     -0.666400     -0.549585     -0.802877   \n",
       "std    ...    293.032715    293.032241    293.032186    293.030118   \n",
       "min    ... -32767.000000 -32767.000000 -32767.000000 -32767.000000   \n",
       "25%    ...      1.089194      0.951097      1.395527      1.105113   \n",
       "50%    ...      1.858734      1.631046      1.972526      1.579172   \n",
       "75%    ...      2.912897      3.038578      2.667577      2.484798   \n",
       "max    ...      5.000000      5.000000      5.000000      5.000000   \n",
       "\n",
       "             W_MINE      W_OILGAS    DEF_PQUANT         W_AGR      W_FOODBV  \\\n",
       "count  25010.000000  25010.000000  25010.000000  25010.000000  25010.000000   \n",
       "mean      -0.501776     -0.647819     -0.684594     -0.755804     -0.529295   \n",
       "std      293.033053    293.031874    293.032914    293.031029    293.032550   \n",
       "min   -32767.000000 -32767.000000 -32767.000000 -32767.000000 -32767.000000   \n",
       "25%        1.333581      1.121818      0.748313      1.005495      1.377493   \n",
       "50%        2.133368      1.815041      1.495203      1.615565      2.038912   \n",
       "75%        2.837052      2.706945      3.244840      2.690274      2.686892   \n",
       "max        5.000000      5.000000      5.000000      5.000000      5.000000   \n",
       "\n",
       "              W_TEX  \n",
       "count  25010.000000  \n",
       "mean      -0.699455  \n",
       "std      293.031570  \n",
       "min   -32767.000000  \n",
       "25%        1.010364  \n",
       "50%        1.745756  \n",
       "75%        2.762228  \n",
       "max        5.000000  \n",
       "\n",
       "[8 rows x 45 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# statistical data\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating a Data Frame with limited data from df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Shape_Leng</th>\n",
       "      <th>Shape_Area</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>BWS</th>\n",
       "      <th>BWS_s</th>\n",
       "      <th>BWS_cat</th>\n",
       "      <th>coords</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.559986</td>\n",
       "      <td>0.005929</td>\n",
       "      <td>Guinea Bissau</td>\n",
       "      <td>0.032105</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1. Low (&lt;10%)</td>\n",
       "      <td>[(-14.752295656190142, 12.618836812527263), (-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.272372</td>\n",
       "      <td>0.099605</td>\n",
       "      <td>Guinea Bissau</td>\n",
       "      <td>0.002884</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1. Low (&lt;10%)</td>\n",
       "      <td>[(-16.137677267978745, 12.29409573338586), (-1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.610379</td>\n",
       "      <td>0.017086</td>\n",
       "      <td>Guinea</td>\n",
       "      <td>0.003614</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1. Low (&lt;10%)</td>\n",
       "      <td>[(-13.562381566112606, 12.667425473965409), (-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.384966</td>\n",
       "      <td>0.636739</td>\n",
       "      <td>Guinea Bissau</td>\n",
       "      <td>0.003614</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1. Low (&lt;10%)</td>\n",
       "      <td>[(-13.732176994830752, 12.578342493768957), (-...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.815190</td>\n",
       "      <td>0.055072</td>\n",
       "      <td>Guinea Bissau</td>\n",
       "      <td>0.003726</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1. Low (&lt;10%)</td>\n",
       "      <td>[(-15.72857010960513, 11.971260070346545), (-1...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Shape_Leng  Shape_Area        COUNTRY       BWS  BWS_s        BWS_cat  \\\n",
       "0    0.559986    0.005929  Guinea Bissau  0.032105    0.0  1. Low (<10%)   \n",
       "1    2.272372    0.099605  Guinea Bissau  0.002884    0.0  1. Low (<10%)   \n",
       "2    0.610379    0.017086         Guinea  0.003614    0.0  1. Low (<10%)   \n",
       "3    5.384966    0.636739  Guinea Bissau  0.003614    0.0  1. Low (<10%)   \n",
       "4    1.815190    0.055072  Guinea Bissau  0.003726    0.0  1. Low (<10%)   \n",
       "\n",
       "                                              coords  \n",
       "0  [(-14.752295656190142, 12.618836812527263), (-...  \n",
       "1  [(-16.137677267978745, 12.29409573338586), (-1...  \n",
       "2  [(-13.562381566112606, 12.667425473965409), (-...  \n",
       "3  [(-13.732176994830752, 12.578342493768957), (-...  \n",
       "4  [(-15.72857010960513, 11.971260070346545), (-1...  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frame = pd.DataFrame({\n",
    "    'Shape_Leng': df['Shape_Leng'],\n",
    "    'Shape_Area': df['Shape_Area'],\n",
    "    'COUNTRY': df['COUNTRY'],\n",
    "    'BWS': df['BWS'],\n",
    "    'BWS_s': df['BWS_s'],\n",
    "    'BWS_cat': df['BWS_cat'],\n",
    "    'coords': df['coords']\n",
    "    }\n",
    ")\n",
    "\n",
    "frame.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Restricting the dataframe only to India"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Shape_Leng</th>\n",
       "      <th>Shape_Area</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>BWS</th>\n",
       "      <th>BWS_s</th>\n",
       "      <th>BWS_cat</th>\n",
       "      <th>coords</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>11562</th>\n",
       "      <td>3.946209</td>\n",
       "      <td>0.291442</td>\n",
       "      <td>India</td>\n",
       "      <td>0.076408</td>\n",
       "      <td>0.611787</td>\n",
       "      <td>1. Low (&lt;10%)</td>\n",
       "      <td>[(75.49198144560114, 13.137811681128767), (75....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11563</th>\n",
       "      <td>3.389910</td>\n",
       "      <td>0.221784</td>\n",
       "      <td>India</td>\n",
       "      <td>1.307863</td>\n",
       "      <td>4.709139</td>\n",
       "      <td>5. Extremely high (&gt;80%)</td>\n",
       "      <td>[(79.89782121424452, 14.036834472408373), (79....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11564</th>\n",
       "      <td>2.409330</td>\n",
       "      <td>0.106535</td>\n",
       "      <td>India</td>\n",
       "      <td>0.039209</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1. Low (&lt;10%)</td>\n",
       "      <td>[(75.64703294173268, 12.485170073197082), (75....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11565</th>\n",
       "      <td>2.350081</td>\n",
       "      <td>0.083753</td>\n",
       "      <td>India</td>\n",
       "      <td>1.656910</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5. Extremely high (&gt;80%)</td>\n",
       "      <td>[(79.84928219448398, 13.400194365845095), (79....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11566</th>\n",
       "      <td>1.706614</td>\n",
       "      <td>0.065695</td>\n",
       "      <td>India</td>\n",
       "      <td>1.229345</td>\n",
       "      <td>4.619817</td>\n",
       "      <td>5. Extremely high (&gt;80%)</td>\n",
       "      <td>[(80.32177685948642, 13.4209251806206), (80.31...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Shape_Leng  Shape_Area COUNTRY       BWS     BWS_s  \\\n",
       "11562    3.946209    0.291442   India  0.076408  0.611787   \n",
       "11563    3.389910    0.221784   India  1.307863  4.709139   \n",
       "11564    2.409330    0.106535   India  0.039209  0.000000   \n",
       "11565    2.350081    0.083753   India  1.656910  5.000000   \n",
       "11566    1.706614    0.065695   India  1.229345  4.619817   \n",
       "\n",
       "                        BWS_cat  \\\n",
       "11562             1. Low (<10%)   \n",
       "11563  5. Extremely high (>80%)   \n",
       "11564             1. Low (<10%)   \n",
       "11565  5. Extremely high (>80%)   \n",
       "11566  5. Extremely high (>80%)   \n",
       "\n",
       "                                                  coords  \n",
       "11562  [(75.49198144560114, 13.137811681128767), (75....  \n",
       "11563  [(79.89782121424452, 14.036834472408373), (79....  \n",
       "11564  [(75.64703294173268, 12.485170073197082), (75....  \n",
       "11565  [(79.84928219448398, 13.400194365845095), (79....  \n",
       "11566  [(80.32177685948642, 13.4209251806206), (80.31...  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frame = frame[frame.COUNTRY=='India']\n",
    "frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Shape_Leng</th>\n",
       "      <th>Shape_Area</th>\n",
       "      <th>COUNTRY</th>\n",
       "      <th>BWS</th>\n",
       "      <th>BWS_s</th>\n",
       "      <th>BWS_cat</th>\n",
       "      <th>coords</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.946209</td>\n",
       "      <td>0.291442</td>\n",
       "      <td>India</td>\n",
       "      <td>0.076408</td>\n",
       "      <td>0.611787</td>\n",
       "      <td>1. Low (&lt;10%)</td>\n",
       "      <td>[(75.49198144560114, 13.137811681128767), (75....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.389910</td>\n",
       "      <td>0.221784</td>\n",
       "      <td>India</td>\n",
       "      <td>1.307863</td>\n",
       "      <td>4.709139</td>\n",
       "      <td>5. Extremely high (&gt;80%)</td>\n",
       "      <td>[(79.89782121424452, 14.036834472408373), (79....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.409330</td>\n",
       "      <td>0.106535</td>\n",
       "      <td>India</td>\n",
       "      <td>0.039209</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1. Low (&lt;10%)</td>\n",
       "      <td>[(75.64703294173268, 12.485170073197082), (75....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.350081</td>\n",
       "      <td>0.083753</td>\n",
       "      <td>India</td>\n",
       "      <td>1.656910</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5. Extremely high (&gt;80%)</td>\n",
       "      <td>[(79.84928219448398, 13.400194365845095), (79....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.706614</td>\n",
       "      <td>0.065695</td>\n",
       "      <td>India</td>\n",
       "      <td>1.229345</td>\n",
       "      <td>4.619817</td>\n",
       "      <td>5. Extremely high (&gt;80%)</td>\n",
       "      <td>[(80.32177685948642, 13.4209251806206), (80.31...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Shape_Leng  Shape_Area COUNTRY       BWS     BWS_s  \\\n",
       "0    3.946209    0.291442   India  0.076408  0.611787   \n",
       "1    3.389910    0.221784   India  1.307863  4.709139   \n",
       "2    2.409330    0.106535   India  0.039209  0.000000   \n",
       "3    2.350081    0.083753   India  1.656910  5.000000   \n",
       "4    1.706614    0.065695   India  1.229345  4.619817   \n",
       "\n",
       "                    BWS_cat                                             coords  \n",
       "0             1. Low (<10%)  [(75.49198144560114, 13.137811681128767), (75....  \n",
       "1  5. Extremely high (>80%)  [(79.89782121424452, 14.036834472408373), (79....  \n",
       "2             1. Low (<10%)  [(75.64703294173268, 12.485170073197082), (75....  \n",
       "3  5. Extremely high (>80%)  [(79.84928219448398, 13.400194365845095), (79....  \n",
       "4  5. Extremely high (>80%)  [(80.32177685948642, 13.4209251806206), (80.31...  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Re-indexing the data frame\n",
    "frame = frame.reset_index(drop=True)\n",
    "frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "260"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# length of frame.coords[0]\n",
    "len(frame.coords[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "598"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(frame.coords)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating a data frame called 'new_frame' to which I append all the coordinates from the previous data frame 'frame'. This new data frame has two columns for now, namely, latitude and longitude. The coordinates are thus easier to work with as compared with the 'coords' column in the previous data frame 'frame'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>75.491981</td>\n",
       "      <td>13.137812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>75.493501</td>\n",
       "      <td>13.128840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>75.502347</td>\n",
       "      <td>13.131266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>75.503865</td>\n",
       "      <td>13.122294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>75.512711</td>\n",
       "      <td>13.124719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>87.768816</td>\n",
       "      <td>25.027541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>87.767734</td>\n",
       "      <td>25.036567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>87.826170</td>\n",
       "      <td>25.044089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>200</th>\n",
       "      <td>87.824014</td>\n",
       "      <td>25.062143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>201</th>\n",
       "      <td>87.833755</td>\n",
       "      <td>25.063394</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>125749 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      latitude  longitude\n",
       "0    75.491981  13.137812\n",
       "1    75.493501  13.128840\n",
       "2    75.502347  13.131266\n",
       "3    75.503865  13.122294\n",
       "4    75.512711  13.124719\n",
       "..         ...        ...\n",
       "197  87.768816  25.027541\n",
       "198  87.767734  25.036567\n",
       "199  87.826170  25.044089\n",
       "200  87.824014  25.062143\n",
       "201  87.833755  25.063394\n",
       "\n",
       "[125749 rows x 2 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_frame = pd.DataFrame(columns=['latitude', 'longitude'])\n",
    "for i in range(0,len(frame.coords)):\n",
    "    new_frame = new_frame.append(pd.DataFrame(frame.coords[i], columns=['latitude', 'longitude'])) \n",
    "new_frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>coordinates</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>75.491981</td>\n",
       "      <td>13.137812</td>\n",
       "      <td>[13.137811681128767, 75.49198144560114]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>75.493501</td>\n",
       "      <td>13.128840</td>\n",
       "      <td>[13.128839945471611, 75.49350102736446]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>75.502347</td>\n",
       "      <td>13.131266</td>\n",
       "      <td>[13.131266129292953, 75.50234673742602]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>75.503865</td>\n",
       "      <td>13.122294</td>\n",
       "      <td>[13.12229389361272, 75.50386533443168]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>75.512711</td>\n",
       "      <td>13.124719</td>\n",
       "      <td>[13.124719004542897, 75.51271075311291]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    latitude  longitude                              coordinates\n",
       "0  75.491981  13.137812  [13.137811681128767, 75.49198144560114]\n",
       "1  75.493501  13.128840  [13.128839945471611, 75.49350102736446]\n",
       "2  75.502347  13.131266  [13.131266129292953, 75.50234673742602]\n",
       "3  75.503865  13.122294   [13.12229389361272, 75.50386533443168]\n",
       "4  75.512711  13.124719  [13.124719004542897, 75.51271075311291]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_frame['coordinates'] = new_frame[['longitude', 'latitude']].values.tolist()\n",
    "new_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking the type of the coordinates column \n",
    "type(new_frame['coordinates'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>coordinates</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>75.491981</td>\n",
       "      <td>13.137812</td>\n",
       "      <td>POINT (13.13781168112877 75.49198144560114)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>75.493501</td>\n",
       "      <td>13.128840</td>\n",
       "      <td>POINT (13.12883994547161 75.49350102736446)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>75.502347</td>\n",
       "      <td>13.131266</td>\n",
       "      <td>POINT (13.13126612929295 75.50234673742602)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>75.503865</td>\n",
       "      <td>13.122294</td>\n",
       "      <td>POINT (13.12229389361272 75.50386533443168)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>75.512711</td>\n",
       "      <td>13.124719</td>\n",
       "      <td>POINT (13.1247190045429 75.51271075311291)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    latitude  longitude                                  coordinates\n",
       "0  75.491981  13.137812  POINT (13.13781168112877 75.49198144560114)\n",
       "1  75.493501  13.128840  POINT (13.12883994547161 75.49350102736446)\n",
       "2  75.502347  13.131266  POINT (13.13126612929295 75.50234673742602)\n",
       "3  75.503865  13.122294  POINT (13.12229389361272 75.50386533443168)\n",
       "4  75.512711  13.124719   POINT (13.1247190045429 75.51271075311291)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Change the coordinates to a geoPoint\n",
    "new_frame['coordinates'] = new_frame['coordinates'].apply(Point)\n",
    "new_frame.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Converting the data frame 'newFrame' to a Geo frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>coordinates</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>75.491981</td>\n",
       "      <td>13.137812</td>\n",
       "      <td>POINT (13.13781 75.49198)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>75.493501</td>\n",
       "      <td>13.128840</td>\n",
       "      <td>POINT (13.12884 75.49350)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>75.502347</td>\n",
       "      <td>13.131266</td>\n",
       "      <td>POINT (13.13127 75.50235)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>75.503865</td>\n",
       "      <td>13.122294</td>\n",
       "      <td>POINT (13.12229 75.50387)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>75.512711</td>\n",
       "      <td>13.124719</td>\n",
       "      <td>POINT (13.12472 75.51271)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    latitude  longitude                coordinates\n",
       "0  75.491981  13.137812  POINT (13.13781 75.49198)\n",
       "1  75.493501  13.128840  POINT (13.12884 75.49350)\n",
       "2  75.502347  13.131266  POINT (13.13127 75.50235)\n",
       "3  75.503865  13.122294  POINT (13.12229 75.50387)\n",
       "4  75.512711  13.124719  POINT (13.12472 75.51271)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Convert the count df to geodf\n",
    "new_frame = geopandas.GeoDataFrame(new_frame, geometry='coordinates')\n",
    "new_frame.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "geopandas.geodataframe.GeoDataFrame"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# making sure that 'newFrame' is now a geo data frame\n",
    "type(new_frame)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "geopandas.geoseries.GeoSeries"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking the type of the coordinates column \n",
    "type(new_frame['coordinates'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualization "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have successfully converted the data frame into a geo data frame, which contains coordinates that correspond to different locations in India, we can plot them and see what we get!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x1440 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "new_frame.plot(figsize=(30,20));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Woops!!! It's India but upside down! Well this is good progress."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
